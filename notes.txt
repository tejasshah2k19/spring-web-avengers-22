eclipse ->
	file -> new ->maven project -> 
internal 
-> maven webapp 
-> project name , artifcat and group 
		spring-web-avengers 
->finish 


------------------------------------------------

convert ->this app->into spring web app 
	1)	spring core
	2)	spring context
	3)	spring bean
	4)	spring el 
	5)	spring web mvc* 
	6)  servlet-api
	
2) we have to configure spring.xml 
	ioc container --> 
	
	1)spring jsp secure ->
			 jsp -> WEB-INF 
					views -> 
		InternalViewResolver 
		
	2) annotation , validation 
			<mvc:annorationdriven>
			
	3) context 
			<context:component-scan base-package="com" />
			
------------------------------------------------
		
		AGAIN 
		
spring core 

spring web 

maven -> jar 

eclipse -> 
	file -> new -> maven project ->
	internal-> webapp -> project name -> finish 

	if java folder is missing inside main then add it. 
	also create com folder inside java 

	pom.xml 
	1) servlet api 

	index.jsp run  

	support -> spring mvc  
	
	1) spring core 
	2) spring context 
	3) spring bean 
	4) spring el 
	5) spring web-mvc  
-----------------------------------------------------------------------
web.xml 
	servlet

IoC container / spring container  

spring.xml -> WEB-INF [ create spring.xml in web-inf] 
-----------------------------------------------------------------------
 

FrontController -> 

Right click on project -> then maven -> update maven project -> in this check force update tick mark -> finish 


-----------------------------------------------------------------------

1) annotation
2) views 
3) base-package 


-----------------------------------------------------------------------------------------------


 1) class extends HttpServlet  ----    @Controller 
 2) service                    ----    n number of method 
 3) map servlet                ----    map method 

-----------------------------------------------------------------------------------------------

Calc.jsp 
	no.1 : [  20  ] 
	no.2 : [  30  ] 
			Add 
			
Output.jsp 
	20 + 30  = 50 

--------------------------------------

validation 
1) hibernate-validator 
2) @NotBlank
3) @Valid 


--------------------------------------
db connection 

1) pom.xml -> spring-jdbc , db driver 
2) spring.xml -> connection -> 
         DriverManagerDataSource { Connection } 
		 JdbcTempalte { PreparedStatment }   		      
 
 
 How to use PD ADMIN !!!! 
         
-------------------------------------
  list out all user from database 
  
  we need to create 1 url that link with method 
  in that method we call getAllUsers() of UserDao which takes 
  data(users) from database , now we use model and pass this 
  users data to frontend side -jsp.
   
  
  



         
         





		
		
			
	 